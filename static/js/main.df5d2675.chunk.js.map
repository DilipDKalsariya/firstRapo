{"version":3,"sources":["Components/About.js","Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","backgroundColor","border","myStyle","setMyStyle","btnText","setBtnText","className","style","id","type","onClick","Navbar","props","mode","to","title","aboutText","toggleMode","htmlFor","TextForm","text","setText","heading","value","onChange","e","console","log","target","rows","newText","toUpperCase","loText","toLowerCase","split","length","defaultProps","Alert","alert","role","message","App","setMode","setAlert","showAlert","msg","tipe","setTimeout","document","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.df5d2675.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nexport default function About() {\r\n    const [myStyle, setMyStyle] = useState({\r\n        color: \"white\",\r\n        backgroundColor: \"black\",\r\n        border: '1px solid white'\r\n    })\r\n    const [btnText, setBtnText] = useState(\"Dark Mode\")\r\n    const toggleStyle = () => {\r\n        if(myStyle.color === \"white\")\r\n        {\r\n            setMyStyle({\r\n                color: \"black\",\r\n                backgroundColor: \"white\"\r\n            })\r\n            setBtnText(\"Dark Mode\")\r\n        } else {\r\n            setMyStyle({\r\n                color: \"white\",\r\n                backgroundColor: \"black\"\r\n            })\r\n            setBtnText(\"Light Mode\")\r\n        }\r\n        \r\n    }\r\n    return (\r\n        \r\n        <div className=\"container\" style={myStyle}>\r\n            <h2 className=\"my-3\">About Us</h2>\r\n            <div className=\"accordion\" id=\"accordionExample\" style={myStyle} >\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"container my-3\">\r\n                <button onClick={toggleStyle} type=\"button\" className=\"btn btn-warning\">{btnText}</button>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={` navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n              </li>\r\n              \r\n            </ul>\r\n            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n              <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n                    title: PropTypes.string.isRequired,\r\n                    aboutText: PropTypes.string.isRequired\r\n                }\r\n\r\nNavbar.defaultProps = {\r\n                    title: 'Default Title',\r\n                    aboutText: \"Default About\"\r\n                }","import React, {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const upClick = ()=>{\r\n        console.log('upercase was clicked!!');\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n    }\r\n    const lowClick = ()=>{\r\n        console.log('lower case was clicked!!');\r\n        let loText = text.toLowerCase();\r\n        setText(loText);\r\n    }\r\n    const handleOnChange = (e)=>{\r\n        console.log('handle On Change!!');\r\n        setText(e.target.value)\r\n    }\r\n    const [text, setText] = useState('');\r\n    return (\r\n        <>\r\n        <div className=\"container\"  style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" value = {text} onChange={handleOnChange} style={{backgroundColor:props.mode==='dark'?'grey':'white', color:props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"3\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-2\" onClick={upClick}>UpperCase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={lowClick}>LowerCase</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n            <h2>Your text summery is....</h2>\r\n            <p>{text.split(\" \").length} words and {text.length} charactors are there.</p>\r\n            <h3>Preview</h3>\r\n            <p>{text.length>0?text:\"Enter your text to prevew here..\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    return (\r\n        \r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{props.alert.type}</strong>: {props.alert.message}\r\n            </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Alert\r\n","\nimport './App.css';\nimport About from './Components/About';\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './Components/Alert';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light') // wather dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (msg, tipe) => {\n    setAlert({\n      message: msg,\n      type: tipe\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 1500);\n  }\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"Dark mode has been enabled.\", \"success\");\n      document.title = \"Dilip App Dark\";\n    } else {\n      setMode(\"light\")\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light  mode has been enabled.\", \"success\");\n      document.title = \"Dilip App Light\";\n    }\n  }\n  return (\n    <>\n      <Router>\n        <Navbar title=\"DhinDha\" aboutText=\"About Us\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          <Switch>\n            <Route exact path=\"/about\">\n              <About />\n            </Route>\n\n            <Route exact path=\"/\">\n              <TextForm heading=\"Type your text..\" mode={mode} />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}